module AcmeAISDK
  module Type
    module Converter
      type input = AcmeAISDK::Type::Converter | Class

      type state =
        {
          strictness: bool | :strong,
          exactness: { yes: Integer, no: Integer, maybe: Integer },
          branched: Integer
        }

      def coerce: (top value, state: AcmeAISDK::Type::Converter::state) -> top

      def dump: (top value) -> top

      def self.type_info: (
        {
          const: (nil | bool | Integer | Float | Symbol)?,
          enum: ^-> AcmeAISDK::Type::Converter::input?,
          union: ^-> AcmeAISDK::Type::Converter::input?
        }
        | ^-> AcmeAISDK::Type::Converter::input
        | AcmeAISDK::Type::Converter::input spec
      ) -> (^-> top)

      def self.coerce: (
        AcmeAISDK::Type::Converter::input target,
        top value,
        ?state: AcmeAISDK::Type::Converter::state
      ) -> top

      def self.dump: (
        AcmeAISDK::Type::Converter::input target,
        top value
      ) -> top
    end
  end
end
