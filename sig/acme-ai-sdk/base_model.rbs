module AcmeAISDK
  module Converter
    type input = AcmeAISDK::Converter | Class

    type state =
      {
        strictness: bool | :strong,
        exactness: { yes: Integer, no: Integer, maybe: Integer },
        branched: Integer
      }

    def coerce: (top value, state: AcmeAISDK::Converter::state) -> top

    def dump: (top value) -> top

    def self.type_info: (
      {
        const: (nil | bool | Integer | Float | Symbol)?,
        enum: ^-> AcmeAISDK::Converter::input?,
        union: ^-> AcmeAISDK::Converter::input?
      }
      | ^-> AcmeAISDK::Converter::input
      | AcmeAISDK::Converter::input spec
    ) -> (^-> top)

    def self.coerce: (
      AcmeAISDK::Converter::input target,
      top value,
      ?state: AcmeAISDK::Converter::state
    ) -> top

    def self.dump: (AcmeAISDK::Converter::input target, top value) -> top
  end

  class Unknown
    extend AcmeAISDK::Converter

    def self.===: (top other) -> bool

    def self.==: (top other) -> bool

    def self.coerce: (top value, state: AcmeAISDK::Converter::state) -> top

    def self.dump: (top value) -> top
  end

  class BooleanModel
    extend AcmeAISDK::Converter

    def self.===: (top other) -> bool

    def self.==: (top other) -> bool

    def self.coerce: (
      bool | top value,
      state: AcmeAISDK::Converter::state
    ) -> (bool | top)

    def self.dump: (bool | top value) -> (bool | top)
  end

  module Enum
    include AcmeAISDK::Converter

    def self.values: -> ::Array[(nil | bool | Integer | Float | Symbol)]

    private def self.finalize!: -> void

    def ===: (top other) -> bool

    def ==: (top other) -> bool

    def coerce: (
      String | Symbol | top value,
      state: AcmeAISDK::Converter::state
    ) -> (Symbol | top)

    def dump: (Symbol | top value) -> (Symbol | top)
  end

  module Union
    include AcmeAISDK::Converter

    private def self.known_variants: -> ::Array[[Symbol?, (^-> AcmeAISDK::Converter::input)]]

    def self.derefed_variants: -> ::Array[[Symbol?, top]]

    def self.variants: -> ::Array[top]

    private def self.discriminator: (Symbol property) -> void

    private def self.variant: (
      Symbol
      | ::Hash[Symbol, top]
      | ^-> AcmeAISDK::Converter::input
      | AcmeAISDK::Converter::input key,
      ?::Hash[Symbol, top]
      | ^-> AcmeAISDK::Converter::input
      | AcmeAISDK::Converter::input spec
    ) -> void

    private def self.resolve_variant: (
      top value
    ) -> AcmeAISDK::Converter::input?

    def ===: (top other) -> bool

    def ==: (top other) -> bool

    def coerce: (top value, state: AcmeAISDK::Converter::state) -> top

    def dump: (top value) -> top
  end

  class ArrayOf
    include AcmeAISDK::Converter

    def self.[]: (
      ::Hash[Symbol, top]
      | ^-> AcmeAISDK::Converter::input
      | AcmeAISDK::Converter::input type_info,
      ?::Hash[Symbol, top] spec
    ) -> instance

    def ===: (top other) -> bool

    def ==: (top other) -> bool

    def coerce: (
      Enumerable[top] | top value,
      state: AcmeAISDK::Converter::state
    ) -> (::Array[top] | top)

    def dump: (Enumerable[top] | top value) -> (::Array[top] | top)

    def item_type: -> top

    def nilable?: -> bool

    def initialize: (
      ::Hash[Symbol, top]
      | ^-> AcmeAISDK::Converter::input
      | AcmeAISDK::Converter::input type_info,
      ?::Hash[Symbol, top] spec
    ) -> void
  end

  class HashOf
    include AcmeAISDK::Converter

    def self.[]: (
      ::Hash[Symbol, top]
      | ^-> AcmeAISDK::Converter::input
      | AcmeAISDK::Converter::input type_info,
      ?::Hash[Symbol, top] spec
    ) -> instance

    def ===: (top other) -> bool

    def ==: (top other) -> bool

    def coerce: (
      ::Hash[top, top] | top value,
      state: AcmeAISDK::Converter::state
    ) -> (::Hash[Symbol, top] | top)

    def dump: (::Hash[top, top] | top value) -> (::Hash[Symbol, top] | top)

    def item_type: -> top

    def nilable?: -> bool

    def initialize: (
      ::Hash[Symbol, top]
      | ^-> AcmeAISDK::Converter::input
      | AcmeAISDK::Converter::input type_info,
      ?::Hash[Symbol, top] spec
    ) -> void
  end

  class BaseModel
    extend AcmeAISDK::Converter

    type known_field =
      { mode: (:coerce | :dump)?, required: bool, nilable: bool }

    def self.known_fields: -> ::Hash[Symbol, (AcmeAISDK::BaseModel::known_field
    & { type_fn: (^-> AcmeAISDK::Converter::input) })]

    def self.fields: -> ::Hash[Symbol, (AcmeAISDK::BaseModel::known_field
    & { type: AcmeAISDK::Converter::input })]

    private def self.add_field: (
      Symbol name_sym,
      required: bool,
      type_info: {
        const: (nil | bool | Integer | Float | Symbol)?,
        enum: ^-> AcmeAISDK::Converter::input?,
        union: ^-> AcmeAISDK::Converter::input?,
        api_name: Symbol
      }
      | ^-> AcmeAISDK::Converter::input
      | AcmeAISDK::Converter::input,
      spec: ::Hash[Symbol, top]
    ) -> void

    def self.required: (
      Symbol name_sym,
      ::Hash[Symbol, top]
      | ^-> AcmeAISDK::Converter::input
      | AcmeAISDK::Converter::input type_info,
      ?::Hash[Symbol, top] spec
    ) -> void

    def self.optional: (
      Symbol name_sym,
      ::Hash[Symbol, top]
      | ^-> AcmeAISDK::Converter::input
      | AcmeAISDK::Converter::input type_info,
      ?::Hash[Symbol, top] spec
    ) -> void

    private def self.request_only: { -> void } -> void

    private def self.response_only: { -> void } -> void

    def self.==: (top other) -> bool

    def ==: (top other) -> bool

    def self.coerce: (
      AcmeAISDK::BaseModel | ::Hash[top, top] | top value,
      state: AcmeAISDK::Converter::state
    ) -> (instance | top)

    def self.dump: (instance | top value) -> (::Hash[top, top] | top)

    def []: (Symbol key) -> top?

    def to_h: -> ::Hash[Symbol, top]

    alias to_hash to_h

    def deconstruct_keys: (::Array[Symbol]? keys) -> ::Hash[Symbol, top]

    def initialize: (?::Hash[Symbol, top] | self data) -> void

    def to_s: -> String

    def inspect: -> String
  end
end
